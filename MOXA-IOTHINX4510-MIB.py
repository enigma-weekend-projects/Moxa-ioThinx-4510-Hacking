#
# PySNMP MIB module MOXA-IOTHINX4510-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://D:\Desktop\Dallas\mibs\IOTHINX4510.mib
# Produced by pysmi-0.3.4 at Sun Aug 30 21:55:18 2020
# On host ? platform ? version ? by user ?
# Using Python version 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, ModuleIdentity, ObjectIdentity, enterprises, Counter64, IpAddress, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Gauge32, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "enterprises", "Counter64", "IpAddress", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Gauge32", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ioThinx4510 = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 10, 4510))
ioThinx4510.setRevisions(('2019-08-07 11:00', '2019-03-05 18:00', '2018-03-05 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ioThinx4510.setRevisionsDescriptions(('Add trap/inform trigger item', 'Add SP/FP table.', 'First version for this MIB. Remove relay mode.',))
if mibBuilder.loadTexts: ioThinx4510.setLastUpdated('201908071100Z')
if mibBuilder.loadTexts: ioThinx4510.setOrganization('Moxa Automation,Inc.')
if mibBuilder.loadTexts: ioThinx4510.setContactInfo('Postal: Moxa Automation,Inc. Fl.4, No.135,Lane 235,Pao-Chiao Rd. Shing Tien City,Taipei,Taiwan,R.O.C Tel: +866-2-89191230')
if mibBuilder.loadTexts: ioThinx4510.setDescription('The MIB module for Moxa ioThinx 4510 specific information.(V1.0)')
class DisplayString(TextualConvention, OctetString):
    description = ''
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 512)

moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
dataAcquisitionAndControl = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10))
systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 1))
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('Device name')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('Firmware version')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Serial number')
deviceLocalDateTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLocalDateTime.setStatus('current')
if mibBuilder.loadTexts: deviceLocalDateTime.setDescription('Device local data and time')
systemError = MibScalar((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemError.setStatus('current')
if mibBuilder.loadTexts: systemError.setDescription('system error')
sp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2))
spTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1), )
if mibBuilder.loadTexts: spTable.setStatus('current')
if mibBuilder.loadTexts: spTable.setDescription('The SP channel monitor table')
spEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "spIndex"))
if mibBuilder.loadTexts: spEntry.setStatus('current')
if mibBuilder.loadTexts: spEntry.setDescription('The SP channel monitor item')
spIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spIndex.setStatus('current')
if mibBuilder.loadTexts: spIndex.setDescription('SP - index.')
spSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSlotNum.setStatus('current')
if mibBuilder.loadTexts: spSlotNum.setDescription('SP - slot number.(...L-2, L-1, 0, R-1, R-2...)')
spChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spChannelNum.setStatus('current')
if mibBuilder.loadTexts: spChannelNum.setDescription('SP - channel number.')
spChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: spChannelAliasName.setDescription('SP - channel alias name.')
spStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("undervalue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatus.setStatus('current')
if mibBuilder.loadTexts: spStatus.setDescription('SP - SP Status.')
spLowerLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spLowerLimitValue.setStatus('current')
if mibBuilder.loadTexts: spLowerLimitValue.setDescription('SP - Lower Limit Value.')
fp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3))
fpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3, 1), )
if mibBuilder.loadTexts: fpTable.setStatus('current')
if mibBuilder.loadTexts: fpTable.setDescription('The FP channel monitor table')
fpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "fpIndex"))
if mibBuilder.loadTexts: fpEntry.setStatus('current')
if mibBuilder.loadTexts: fpEntry.setDescription('The FP channel monitor item')
fpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIndex.setStatus('current')
if mibBuilder.loadTexts: fpIndex.setDescription('FP - index.')
fpSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSlotNum.setStatus('current')
if mibBuilder.loadTexts: fpSlotNum.setDescription('FP - slot number.(...L-2, L-1, 0, R-1, R-2...)')
fpChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpChannelNum.setStatus('current')
if mibBuilder.loadTexts: fpChannelNum.setDescription('FP - channel number.')
fpChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: fpChannelAliasName.setDescription('FP - channel alias name.')
fpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("na", 1), ("overvalue", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatus.setStatus('current')
if mibBuilder.loadTexts: fpStatus.setDescription('FP - FP Status.')
di = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11))
diTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1), )
if mibBuilder.loadTexts: diTable.setStatus('current')
if mibBuilder.loadTexts: diTable.setDescription('The DI channel monitor table')
diEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "diIndex"))
if mibBuilder.loadTexts: diEntry.setStatus('current')
if mibBuilder.loadTexts: diEntry.setDescription('The DI channel monitor item')
diIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diIndex.setStatus('current')
if mibBuilder.loadTexts: diIndex.setDescription('DI - index.')
diSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diSlotNum.setStatus('current')
if mibBuilder.loadTexts: diSlotNum.setDescription('DI - slot number.(...L-2, L-1, 0, R-1, R-2...)')
diChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diChannelNum.setStatus('current')
if mibBuilder.loadTexts: diChannelNum.setDescription('DI - channel number.')
diChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: diChannelAliasName.setDescription('DI - channel alias name.')
diMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("di", 0), ("counter", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diMode.setStatus('current')
if mibBuilder.loadTexts: diMode.setDescription('DI - mode')
diStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diStatus.setStatus('current')
if mibBuilder.loadTexts: diStatus.setDescription('DI - DI mode - status.')
diCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pause", 0), ("run", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diCounterStatus.setStatus('current')
if mibBuilder.loadTexts: diCounterStatus.setDescription('DI - Counter mode - status.')
diCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diCounterValue.setStatus('current')
if mibBuilder.loadTexts: diCounterValue.setDescription('DI - Counter mode - value')
diCounterOverflowFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("overflow", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diCounterOverflowFlag.setStatus('current')
if mibBuilder.loadTexts: diCounterOverflowFlag.setDescription('DI - Counter mode - overflow flag.')
diCounterOverflowFlagClear = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diCounterOverflowFlagClear.setStatus('current')
if mibBuilder.loadTexts: diCounterOverflowFlagClear.setDescription('DI - Counter mode - clear overflow flag.')
do = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12))
doTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1), )
if mibBuilder.loadTexts: doTable.setStatus('current')
if mibBuilder.loadTexts: doTable.setDescription('The DO channel monitor table')
doEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "doIndex"))
if mibBuilder.loadTexts: doEntry.setStatus('current')
if mibBuilder.loadTexts: doEntry.setDescription('The DO channel monitor item')
doIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doIndex.setStatus('current')
if mibBuilder.loadTexts: doIndex.setDescription('DO - index.')
doSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSlotNum.setStatus('current')
if mibBuilder.loadTexts: doSlotNum.setDescription('DO - slot number.(...L-2, L-1, 0, R-1, R-2...)')
doChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doChannelNum.setStatus('current')
if mibBuilder.loadTexts: doChannelNum.setDescription('DO - channel number.')
doChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: doChannelAliasName.setDescription('DO - channel alias name.')
doMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("do", 0), ("pulse", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doMode.setStatus('current')
if mibBuilder.loadTexts: doMode.setDescription('DO - mode')
doStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doStatus.setStatus('current')
if mibBuilder.loadTexts: doStatus.setDescription('DO - DO mode - status.')
doPulseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pause", 0), ("run", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doPulseStatus.setStatus('current')
if mibBuilder.loadTexts: doPulseStatus.setDescription('DO - Pulse mode - status.')
doPulseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doPulseCount.setStatus('current')
if mibBuilder.loadTexts: doPulseCount.setDescription('DO - Pulse mode - count')
doPulseOnWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doPulseOnWidth.setStatus('current')
if mibBuilder.loadTexts: doPulseOnWidth.setDescription('DO - Pulse mode - ON width (unit: 500 us).')
doPulseOffWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doPulseOffWidth.setStatus('current')
if mibBuilder.loadTexts: doPulseOffWidth.setDescription('DO - Pulse mode - OFF width (unit: 500 us).')
relay = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13))
relayTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1), )
if mibBuilder.loadTexts: relayTable.setStatus('current')
if mibBuilder.loadTexts: relayTable.setDescription('The Relay channel monitor table')
relayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "relayIndex"))
if mibBuilder.loadTexts: relayEntry.setStatus('current')
if mibBuilder.loadTexts: relayEntry.setDescription('The Relay channel monitor item')
relayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayIndex.setStatus('current')
if mibBuilder.loadTexts: relayIndex.setDescription('Relay - index.')
relaySlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySlotNum.setStatus('current')
if mibBuilder.loadTexts: relaySlotNum.setDescription('Relay - slot number.(...L-2, L-1, 0, R-1, R-2...)')
relayChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayChannelNum.setStatus('current')
if mibBuilder.loadTexts: relayChannelNum.setDescription('Relay - channel number.')
relayChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: relayChannelAliasName.setDescription('Relay - channel alias name.')
relayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayStatus.setStatus('current')
if mibBuilder.loadTexts: relayStatus.setDescription('Relay - Relay mode - status.')
relayTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayTotalCount.setStatus('current')
if mibBuilder.loadTexts: relayTotalCount.setDescription('Relay - total count.')
relayCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayCurrentCount.setStatus('current')
if mibBuilder.loadTexts: relayCurrentCount.setDescription('Relay - current count')
relayCurrentCountReset = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayCurrentCountReset.setStatus('current')
if mibBuilder.loadTexts: relayCurrentCountReset.setDescription('Relay - current count reset.')
ai = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21))
aiTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1), )
if mibBuilder.loadTexts: aiTable.setStatus('current')
if mibBuilder.loadTexts: aiTable.setDescription('The AI channel monitor table')
aiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "aiIndex"))
if mibBuilder.loadTexts: aiEntry.setStatus('current')
if mibBuilder.loadTexts: aiEntry.setDescription('The AI channel monitor item')
aiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiIndex.setStatus('current')
if mibBuilder.loadTexts: aiIndex.setDescription('AI - index.')
aiSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSlotNum.setStatus('current')
if mibBuilder.loadTexts: aiSlotNum.setDescription('AI - slot number.(...L-2, L-1, 0, R-1, R-2...)')
aiChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiChannelNum.setStatus('current')
if mibBuilder.loadTexts: aiChannelNum.setDescription('AI - channel number.')
aiChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: aiChannelAliasName.setDescription('AI - channel alias name.')
aiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiMode.setStatus('current')
if mibBuilder.loadTexts: aiMode.setDescription('AI - mode {disable(0), 0-10V(1), 0-20mA(2), 4-20mA burnout(3), 4-20mA(4), +/-10V(5)}')
aiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("burnout", 1), ("overRange", 2), ("underRange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiStatus.setStatus('current')
if mibBuilder.loadTexts: aiStatus.setDescription('AI - status.')
aiValueRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiValueRaw.setStatus('current')
if mibBuilder.loadTexts: aiValueRaw.setDescription('AI - raw value.')
aiValueRawMin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiValueRawMin.setStatus('current')
if mibBuilder.loadTexts: aiValueRawMin.setDescription('AI - minimum raw value.')
aiValueRawMax = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiValueRawMax.setStatus('current')
if mibBuilder.loadTexts: aiValueRawMax.setDescription('AI - maximum raw value.')
aiValueScaled = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiValueScaled.setStatus('current')
if mibBuilder.loadTexts: aiValueScaled.setDescription('AI - scaled value.')
aiValueScaledMin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiValueScaledMin.setStatus('current')
if mibBuilder.loadTexts: aiValueScaledMin.setDescription('AI - minimum scaled value.')
aiValueScaledMax = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiValueScaledMax.setStatus('current')
if mibBuilder.loadTexts: aiValueScaledMax.setDescription('AI - maximum scaled value.')
aiBurnoutValueScaled = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiBurnoutValueScaled.setStatus('current')
if mibBuilder.loadTexts: aiBurnoutValueScaled.setDescription('AI - scaled burnout value.')
aiResetMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiResetMinValue.setStatus('current')
if mibBuilder.loadTexts: aiResetMinValue.setDescription('AI - reset minimum value.')
aiResetMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 21, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiResetMaxValue.setStatus('current')
if mibBuilder.loadTexts: aiResetMaxValue.setDescription('AI - reset maximum value.')
ao = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22))
aoTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1), )
if mibBuilder.loadTexts: aoTable.setStatus('current')
if mibBuilder.loadTexts: aoTable.setDescription('The AO channel monitor table')
aoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "aoIndex"))
if mibBuilder.loadTexts: aoEntry.setStatus('current')
if mibBuilder.loadTexts: aoEntry.setDescription('The AO channel monitor item')
aoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoIndex.setStatus('current')
if mibBuilder.loadTexts: aoIndex.setDescription('AO - index.')
aoSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoSlotNum.setStatus('current')
if mibBuilder.loadTexts: aoSlotNum.setDescription('AO - slot number.(...L-2, L-1, 0, R-1, R-2...)')
aoChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoChannelNum.setStatus('current')
if mibBuilder.loadTexts: aoChannelNum.setDescription('AO - channel number.')
aoChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: aoChannelAliasName.setDescription('AO - channel alias name.')
aoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoMode.setStatus('current')
if mibBuilder.loadTexts: aoMode.setDescription('AO - mode {disable(0), 0-10V(1), 0-20mA(2), 4-20mA(3)}')
aoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aoStatus.setStatus('current')
if mibBuilder.loadTexts: aoStatus.setDescription('AO - status {normal(0), fault(1)}')
aoValueRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoValueRaw.setStatus('current')
if mibBuilder.loadTexts: aoValueRaw.setDescription('AO - raw value.')
aoValueScaled = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 22, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aoValueScaled.setStatus('current')
if mibBuilder.loadTexts: aoValueScaled.setDescription('AO - scaled value.')
rtd = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23))
rtdTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1), )
if mibBuilder.loadTexts: rtdTable.setStatus('current')
if mibBuilder.loadTexts: rtdTable.setDescription('The RTD channel monitor table')
rtdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "rtdIndex"))
if mibBuilder.loadTexts: rtdEntry.setStatus('current')
if mibBuilder.loadTexts: rtdEntry.setDescription('The RTD channel monitor item')
rtdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdIndex.setStatus('current')
if mibBuilder.loadTexts: rtdIndex.setDescription('RTD - index.')
rtdSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdSlotNum.setStatus('current')
if mibBuilder.loadTexts: rtdSlotNum.setDescription('RTD - slot number.(...L-2, L-1, 0, R-1, R-2...)')
rtdChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdChannelNum.setStatus('current')
if mibBuilder.loadTexts: rtdChannelNum.setDescription('RTD - channel number.')
rtdChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: rtdChannelAliasName.setDescription('RTD - channel alias name.')
rtdType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4), ValueRangeConstraint(14, 17), ValueRangeConstraint(20, 23), ValueRangeConstraint(30, 34), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdType.setStatus('current')
if mibBuilder.loadTexts: rtdType.setDescription('RTD - Type {PT50(0), PT100(1), PT200(2), PT500(3), PT1000(4), 310 Ohm(14), 620 Ohm(15), 1250 Ohm(16), 2200 Ohm(17), JPT100(20), JPT200(21), JPT500(22), JPT1000(23); NI100(30), NI200(31), NI500(32), NI1000(33), NI120(34)}')
rtdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("burnout", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdStatus.setStatus('current')
if mibBuilder.loadTexts: rtdStatus.setDescription('RTD status')
rtdValueScaled = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdValueScaled.setStatus('current')
if mibBuilder.loadTexts: rtdValueScaled.setDescription('RTD - scaled value.')
rtdValueScaledMin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdValueScaledMin.setStatus('current')
if mibBuilder.loadTexts: rtdValueScaledMin.setDescription('RTD - minimum scaled value.')
rtdValueScaledMax = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtdValueScaledMax.setStatus('current')
if mibBuilder.loadTexts: rtdValueScaledMax.setDescription('RTD - maximum scaled value.')
rtdResetMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtdResetMinValue.setStatus('current')
if mibBuilder.loadTexts: rtdResetMinValue.setDescription('RTD - reset minimum value.')
rtdResetMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 23, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtdResetMaxValue.setStatus('current')
if mibBuilder.loadTexts: rtdResetMaxValue.setDescription('RTD - reset maximum value.')
tc = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24))
tcTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1), )
if mibBuilder.loadTexts: tcTable.setStatus('current')
if mibBuilder.loadTexts: tcTable.setDescription('The TC channel monitor table')
tcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "tcIndex"))
if mibBuilder.loadTexts: tcEntry.setStatus('current')
if mibBuilder.loadTexts: tcEntry.setDescription('The TC channel monitor item')
tcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcIndex.setStatus('current')
if mibBuilder.loadTexts: tcIndex.setDescription('TC - index.')
tcSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcSlotNum.setStatus('current')
if mibBuilder.loadTexts: tcSlotNum.setDescription('TC - slot number.(...L-2, L-1, 0, R-1, R-2...)')
tcChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcChannelNum.setStatus('current')
if mibBuilder.loadTexts: tcChannelNum.setDescription('TC - channel number.')
tcChannelAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcChannelAliasName.setStatus('current')
if mibBuilder.loadTexts: tcChannelAliasName.setDescription('TC - channel alias name.')
tcType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(14, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcType.setStatus('current')
if mibBuilder.loadTexts: tcType.setDescription('TC - Type. {J Type(0), K Type(1), T Type(2), E Type(3), R Type(4), S Type(5), B Type(6), N Type(7), +/-78.126 mV(14), +/-39.062 mV(15), +/-19.532 mV(16)}')
tcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("burnout", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcStatus.setStatus('current')
if mibBuilder.loadTexts: tcStatus.setDescription('TC - status.')
tcValueScaled = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcValueScaled.setStatus('current')
if mibBuilder.loadTexts: tcValueScaled.setDescription('TC - scaled value.')
tcValueScaledMin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcValueScaledMin.setStatus('current')
if mibBuilder.loadTexts: tcValueScaledMin.setDescription('TC - minimum scaled value.')
tcValueScaledMax = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcValueScaledMax.setStatus('current')
if mibBuilder.loadTexts: tcValueScaledMax.setDescription('TC - maximum scaled value.')
tcResetMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcResetMinValue.setStatus('current')
if mibBuilder.loadTexts: tcResetMinValue.setDescription('TC - reset minimum value.')
tcResetMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 24, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcResetMaxValue.setStatus('current')
if mibBuilder.loadTexts: tcResetMaxValue.setDescription('TC - reset maximum value.')
ir = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41))
birTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 1), )
if mibBuilder.loadTexts: birTable.setStatus('current')
if mibBuilder.loadTexts: birTable.setDescription('BOOL IR - table')
birEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 1, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "birIndex"))
if mibBuilder.loadTexts: birEntry.setStatus('current')
if mibBuilder.loadTexts: birEntry.setDescription('BOOL IR - entry')
birIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: birIndex.setStatus('current')
if mibBuilder.loadTexts: birIndex.setDescription('BOOL IR - index.')
birName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: birName.setStatus('current')
if mibBuilder.loadTexts: birName.setDescription('BOOL IR - name.')
birValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: birValue.setStatus('current')
if mibBuilder.loadTexts: birValue.setDescription('BOOL IR - value.')
wirTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 2), )
if mibBuilder.loadTexts: wirTable.setStatus('current')
if mibBuilder.loadTexts: wirTable.setDescription('WORD IR - table')
wirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 2, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "wirIndex"))
if mibBuilder.loadTexts: wirEntry.setStatus('current')
if mibBuilder.loadTexts: wirEntry.setDescription('WORD IR - entry')
wirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirIndex.setStatus('current')
if mibBuilder.loadTexts: wirIndex.setDescription('WORD IR - index.')
wirName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirName.setStatus('current')
if mibBuilder.loadTexts: wirName.setDescription('WORD IR - name.')
wirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirValue.setStatus('current')
if mibBuilder.loadTexts: wirValue.setDescription('WORD IR - value.')
dirTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 3), )
if mibBuilder.loadTexts: dirTable.setStatus('current')
if mibBuilder.loadTexts: dirTable.setDescription('DWORD IR - table')
dirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 3, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "dirIndex"))
if mibBuilder.loadTexts: dirEntry.setStatus('current')
if mibBuilder.loadTexts: dirEntry.setDescription('DWORD IR - entry')
dirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dirIndex.setStatus('current')
if mibBuilder.loadTexts: dirIndex.setDescription('DWORD IR - index.')
dirName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dirName.setStatus('current')
if mibBuilder.loadTexts: dirName.setDescription('DWORD IR - name.')
dirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dirValue.setStatus('current')
if mibBuilder.loadTexts: dirValue.setDescription('DWORD IR - value.')
firTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 4), )
if mibBuilder.loadTexts: firTable.setStatus('current')
if mibBuilder.loadTexts: firTable.setDescription('FLOAT IR - table')
firEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 4, 1), ).setIndexNames((0, "MOXA-IOTHINX4510-MIB", "firIndex"))
if mibBuilder.loadTexts: firEntry.setStatus('current')
if mibBuilder.loadTexts: firEntry.setDescription('FLOAT IR - entry')
firIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firIndex.setStatus('current')
if mibBuilder.loadTexts: firIndex.setDescription('FLOAT IR - index.')
firName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firName.setStatus('current')
if mibBuilder.loadTexts: firName.setDescription('FLOAT IR - name.')
firValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 41, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firValue.setStatus('current')
if mibBuilder.loadTexts: firValue.setDescription('FLOAT IR - value.')
event = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91))
trapInform01 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 1))
if mibBuilder.loadTexts: trapInform01.setStatus('current')
if mibBuilder.loadTexts: trapInform01.setDescription('SNMP Trap/Inform 01')
trapInform02 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 2))
if mibBuilder.loadTexts: trapInform02.setStatus('current')
if mibBuilder.loadTexts: trapInform02.setDescription('SNMP Trap/Inform 02')
trapInform03 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 3))
if mibBuilder.loadTexts: trapInform03.setStatus('current')
if mibBuilder.loadTexts: trapInform03.setDescription('SNMP Trap/Inform 03')
trapInform04 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 4))
if mibBuilder.loadTexts: trapInform04.setStatus('current')
if mibBuilder.loadTexts: trapInform04.setDescription('SNMP Trap/Inform 04')
trapInform05 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 5))
if mibBuilder.loadTexts: trapInform05.setStatus('current')
if mibBuilder.loadTexts: trapInform05.setDescription('SNMP Trap/Inform 05')
trapInform06 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 6))
if mibBuilder.loadTexts: trapInform06.setStatus('current')
if mibBuilder.loadTexts: trapInform06.setDescription('SNMP Trap/Inform 06')
trapInform07 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 7))
if mibBuilder.loadTexts: trapInform07.setStatus('current')
if mibBuilder.loadTexts: trapInform07.setDescription('SNMP Trap/Inform 07')
trapInform08 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 8))
if mibBuilder.loadTexts: trapInform08.setStatus('current')
if mibBuilder.loadTexts: trapInform08.setDescription('SNMP Trap/Inform 08')
trapInform09 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 9))
if mibBuilder.loadTexts: trapInform09.setStatus('current')
if mibBuilder.loadTexts: trapInform09.setDescription('SNMP Trap/Inform 09')
trapInform10 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 10))
if mibBuilder.loadTexts: trapInform10.setStatus('current')
if mibBuilder.loadTexts: trapInform10.setDescription('SNMP Trap/Inform 10')
trapInform11 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 11))
if mibBuilder.loadTexts: trapInform11.setStatus('current')
if mibBuilder.loadTexts: trapInform11.setDescription('SNMP Trap/Inform 11')
trapInform12 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 12))
if mibBuilder.loadTexts: trapInform12.setStatus('current')
if mibBuilder.loadTexts: trapInform12.setDescription('SNMP Trap/Inform 12')
trapInform13 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 13))
if mibBuilder.loadTexts: trapInform13.setStatus('current')
if mibBuilder.loadTexts: trapInform13.setDescription('SNMP Trap/Inform 13')
trapInform14 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 14))
if mibBuilder.loadTexts: trapInform14.setStatus('current')
if mibBuilder.loadTexts: trapInform14.setDescription('SNMP Trap/Inform 14')
trapInform15 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 15))
if mibBuilder.loadTexts: trapInform15.setStatus('current')
if mibBuilder.loadTexts: trapInform15.setDescription('SNMP Trap/Inform 15')
trapInform16 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 16))
if mibBuilder.loadTexts: trapInform16.setStatus('current')
if mibBuilder.loadTexts: trapInform16.setDescription('SNMP Trap/Inform 16')
trapInform17 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 17))
if mibBuilder.loadTexts: trapInform17.setStatus('current')
if mibBuilder.loadTexts: trapInform17.setDescription('SNMP Trap/Inform 17')
trapInform18 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 18))
if mibBuilder.loadTexts: trapInform18.setStatus('current')
if mibBuilder.loadTexts: trapInform18.setDescription('SNMP Trap/Inform 18')
trapInform19 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 19))
if mibBuilder.loadTexts: trapInform19.setStatus('current')
if mibBuilder.loadTexts: trapInform19.setDescription('SNMP Trap/Inform 19')
trapInform20 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 20))
if mibBuilder.loadTexts: trapInform20.setStatus('current')
if mibBuilder.loadTexts: trapInform20.setDescription('SNMP Trap/Inform 20')
trapInform21 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 21))
if mibBuilder.loadTexts: trapInform21.setStatus('current')
if mibBuilder.loadTexts: trapInform21.setDescription('SNMP Trap/Inform 21')
trapInform22 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 22))
if mibBuilder.loadTexts: trapInform22.setStatus('current')
if mibBuilder.loadTexts: trapInform22.setDescription('SNMP Trap/Inform 22')
trapInform23 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 23))
if mibBuilder.loadTexts: trapInform23.setStatus('current')
if mibBuilder.loadTexts: trapInform23.setDescription('SNMP Trap/Inform 23')
trapInform24 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 24))
if mibBuilder.loadTexts: trapInform24.setStatus('current')
if mibBuilder.loadTexts: trapInform24.setDescription('SNMP Trap/Inform 24')
trapInform25 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 25))
if mibBuilder.loadTexts: trapInform25.setStatus('current')
if mibBuilder.loadTexts: trapInform25.setDescription('SNMP Trap/Inform 25')
trapInform26 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 26))
if mibBuilder.loadTexts: trapInform26.setStatus('current')
if mibBuilder.loadTexts: trapInform26.setDescription('SNMP Trap/Inform 26')
trapInform27 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 27))
if mibBuilder.loadTexts: trapInform27.setStatus('current')
if mibBuilder.loadTexts: trapInform27.setDescription('SNMP Trap/Inform 27')
trapInform28 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 28))
if mibBuilder.loadTexts: trapInform28.setStatus('current')
if mibBuilder.loadTexts: trapInform28.setDescription('SNMP Trap/Inform 28')
trapInform29 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 29))
if mibBuilder.loadTexts: trapInform29.setStatus('current')
if mibBuilder.loadTexts: trapInform29.setDescription('SNMP Trap/Inform 29')
trapInform30 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 30))
if mibBuilder.loadTexts: trapInform30.setStatus('current')
if mibBuilder.loadTexts: trapInform30.setDescription('SNMP Trap/Inform 30')
trapInform31 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 31))
if mibBuilder.loadTexts: trapInform31.setStatus('current')
if mibBuilder.loadTexts: trapInform31.setDescription('SNMP Trap/Inform 31')
trapInform32 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 32))
if mibBuilder.loadTexts: trapInform32.setStatus('current')
if mibBuilder.loadTexts: trapInform32.setDescription('SNMP Trap/Inform 32')
trapInform33 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 33))
if mibBuilder.loadTexts: trapInform33.setStatus('current')
if mibBuilder.loadTexts: trapInform33.setDescription('SNMP Trap/Inform 33')
trapInform34 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 34))
if mibBuilder.loadTexts: trapInform34.setStatus('current')
if mibBuilder.loadTexts: trapInform34.setDescription('SNMP Trap/Inform 34')
trapInform35 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 35))
if mibBuilder.loadTexts: trapInform35.setStatus('current')
if mibBuilder.loadTexts: trapInform35.setDescription('SNMP Trap/Inform 35')
trapInform36 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 36))
if mibBuilder.loadTexts: trapInform36.setStatus('current')
if mibBuilder.loadTexts: trapInform36.setDescription('SNMP Trap/Inform 36')
trapInform37 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 37))
if mibBuilder.loadTexts: trapInform37.setStatus('current')
if mibBuilder.loadTexts: trapInform37.setDescription('SNMP Trap/Inform 37')
trapInform38 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 38))
if mibBuilder.loadTexts: trapInform38.setStatus('current')
if mibBuilder.loadTexts: trapInform38.setDescription('SNMP Trap/Inform 38')
trapInform39 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 39))
if mibBuilder.loadTexts: trapInform39.setStatus('current')
if mibBuilder.loadTexts: trapInform39.setDescription('SNMP Trap/Inform 39')
trapInform40 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 40))
if mibBuilder.loadTexts: trapInform40.setStatus('current')
if mibBuilder.loadTexts: trapInform40.setDescription('SNMP Trap/Inform 40')
trapInform41 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 41))
if mibBuilder.loadTexts: trapInform41.setStatus('current')
if mibBuilder.loadTexts: trapInform41.setDescription('SNMP Trap/Inform 41')
trapInform42 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 42))
if mibBuilder.loadTexts: trapInform42.setStatus('current')
if mibBuilder.loadTexts: trapInform42.setDescription('SNMP Trap/Inform 42')
trapInform43 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 43))
if mibBuilder.loadTexts: trapInform43.setStatus('current')
if mibBuilder.loadTexts: trapInform43.setDescription('SNMP Trap/Inform 43')
trapInform44 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 44))
if mibBuilder.loadTexts: trapInform44.setStatus('current')
if mibBuilder.loadTexts: trapInform44.setDescription('SNMP Trap/Inform 44')
trapInform45 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 45))
if mibBuilder.loadTexts: trapInform45.setStatus('current')
if mibBuilder.loadTexts: trapInform45.setDescription('SNMP Trap/Inform 45')
trapInform46 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 46))
if mibBuilder.loadTexts: trapInform46.setStatus('current')
if mibBuilder.loadTexts: trapInform46.setDescription('SNMP Trap/Inform 46')
trapInform47 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 47))
if mibBuilder.loadTexts: trapInform47.setStatus('current')
if mibBuilder.loadTexts: trapInform47.setDescription('SNMP Trap/Inform 47')
trapInform48 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 48))
if mibBuilder.loadTexts: trapInform48.setStatus('current')
if mibBuilder.loadTexts: trapInform48.setDescription('SNMP Trap/Inform 48')
trapInform49 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 49))
if mibBuilder.loadTexts: trapInform49.setStatus('current')
if mibBuilder.loadTexts: trapInform49.setDescription('SNMP Trap/Inform 49')
trapInform50 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 50))
if mibBuilder.loadTexts: trapInform50.setStatus('current')
if mibBuilder.loadTexts: trapInform50.setDescription('SNMP Trap/Inform 50')
trapInform51 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 51))
if mibBuilder.loadTexts: trapInform51.setStatus('current')
if mibBuilder.loadTexts: trapInform51.setDescription('SNMP Trap/Inform 51')
trapInform52 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 52))
if mibBuilder.loadTexts: trapInform52.setStatus('current')
if mibBuilder.loadTexts: trapInform52.setDescription('SNMP Trap/Inform 52')
trapInform53 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 53))
if mibBuilder.loadTexts: trapInform53.setStatus('current')
if mibBuilder.loadTexts: trapInform53.setDescription('SNMP Trap/Inform 53')
trapInform54 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 54))
if mibBuilder.loadTexts: trapInform54.setStatus('current')
if mibBuilder.loadTexts: trapInform54.setDescription('SNMP Trap/Inform 54')
trapInform55 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 55))
if mibBuilder.loadTexts: trapInform55.setStatus('current')
if mibBuilder.loadTexts: trapInform55.setDescription('SNMP Trap/Inform 55')
trapInform56 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 56))
if mibBuilder.loadTexts: trapInform56.setStatus('current')
if mibBuilder.loadTexts: trapInform56.setDescription('SNMP Trap/Inform 56')
trapInform57 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 57))
if mibBuilder.loadTexts: trapInform57.setStatus('current')
if mibBuilder.loadTexts: trapInform57.setDescription('SNMP Trap/Inform 57')
trapInform58 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 58))
if mibBuilder.loadTexts: trapInform58.setStatus('current')
if mibBuilder.loadTexts: trapInform58.setDescription('SNMP Trap/Inform 58')
trapInform59 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 59))
if mibBuilder.loadTexts: trapInform59.setStatus('current')
if mibBuilder.loadTexts: trapInform59.setDescription('SNMP Trap/Inform 59')
trapInform60 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 60))
if mibBuilder.loadTexts: trapInform60.setStatus('current')
if mibBuilder.loadTexts: trapInform60.setDescription('SNMP Trap/Inform 60')
trapInform61 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 61))
if mibBuilder.loadTexts: trapInform61.setStatus('current')
if mibBuilder.loadTexts: trapInform61.setDescription('SNMP Trap/Inform 61')
trapInform62 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 62))
if mibBuilder.loadTexts: trapInform62.setStatus('current')
if mibBuilder.loadTexts: trapInform62.setDescription('SNMP Trap/Inform 62')
trapInform63 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 63))
if mibBuilder.loadTexts: trapInform63.setStatus('current')
if mibBuilder.loadTexts: trapInform63.setDescription('SNMP Trap/Inform 63')
trapInform64 = NotificationType((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 91, 64))
if mibBuilder.loadTexts: trapInform64.setStatus('current')
if mibBuilder.loadTexts: trapInform64.setDescription('SNMP Trap/Inform 64')
eventTriggerType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 10, 4510, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onChange", 1), ("onToOff", 2), ("offToOn", 3), ("greater", 4), ("less", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTriggerType.setStatus('current')
if mibBuilder.loadTexts: eventTriggerType.setDescription('Trigger Type: OnChange(1), On to Off(2), Off to On(3), Greater(4), Less(5)')
mibBuilder.exportSymbols("MOXA-IOTHINX4510-MIB", trapInform51=trapInform51, systemError=systemError, dirName=dirName, ao=ao, aoChannelNum=aoChannelNum, trapInform10=trapInform10, doChannelAliasName=doChannelAliasName, rtd=rtd, rtdEntry=rtdEntry, do=do, aiTable=aiTable, tcIndex=tcIndex, trapInform52=trapInform52, aiResetMaxValue=aiResetMaxValue, spEntry=spEntry, relayEntry=relayEntry, aiIndex=aiIndex, trapInform42=trapInform42, fpTable=fpTable, trapInform05=trapInform05, doChannelNum=doChannelNum, relayCurrentCount=relayCurrentCount, trapInform19=trapInform19, rtdSlotNum=rtdSlotNum, trapInform28=trapInform28, rtdTable=rtdTable, fpChannelNum=fpChannelNum, aoSlotNum=aoSlotNum, doPulseStatus=doPulseStatus, relayCurrentCountReset=relayCurrentCountReset, aiEntry=aiEntry, rtdIndex=rtdIndex, trapInform44=trapInform44, trapInform03=trapInform03, fpStatus=fpStatus, wirName=wirName, aiValueScaled=aiValueScaled, rtdType=rtdType, tcValueScaledMax=tcValueScaledMax, rtdResetMaxValue=rtdResetMaxValue, trapInform11=trapInform11, tcChannelAliasName=tcChannelAliasName, aoTable=aoTable, tcTable=tcTable, tcChannelNum=tcChannelNum, fpChannelAliasName=fpChannelAliasName, fpEntry=fpEntry, trapInform16=trapInform16, diCounterStatus=diCounterStatus, firValue=firValue, trapInform20=trapInform20, di=di, rtdStatus=rtdStatus, deviceName=deviceName, birName=birName, relayChannelNum=relayChannelNum, trapInform23=trapInform23, trapInform53=trapInform53, wirValue=wirValue, trapInform24=trapInform24, spLowerLimitValue=spLowerLimitValue, tcSlotNum=tcSlotNum, trapInform07=trapInform07, trapInform15=trapInform15, trapInform32=trapInform32, fp=fp, ai=ai, firEntry=firEntry, trapInform39=trapInform39, sp=sp, trapInform50=trapInform50, PYSNMP_MODULE_ID=ioThinx4510, relayTable=relayTable, systemInfo=systemInfo, spSlotNum=spSlotNum, tcEntry=tcEntry, aiStatus=aiStatus, trapInform41=trapInform41, aoEntry=aoEntry, trapInform62=trapInform62, relayStatus=relayStatus, trapInform59=trapInform59, trapInform48=trapInform48, dirTable=dirTable, trapInform08=trapInform08, doMode=doMode, eventTriggerType=eventTriggerType, dirIndex=dirIndex, doPulseCount=doPulseCount, trapInform22=trapInform22, trapInform47=trapInform47, fpIndex=fpIndex, wirIndex=wirIndex, trapInform33=trapInform33, trapInform43=trapInform43, relayTotalCount=relayTotalCount, dataAcquisitionAndControl=dataAcquisitionAndControl, serialNumber=serialNumber, doIndex=doIndex, aoIndex=aoIndex, trapInform36=trapInform36, aiValueRaw=aiValueRaw, tcResetMinValue=tcResetMinValue, trapInform06=trapInform06, aiChannelAliasName=aiChannelAliasName, doEntry=doEntry, diCounterValue=diCounterValue, tcStatus=tcStatus, tcValueScaledMin=tcValueScaledMin, tcValueScaled=tcValueScaled, birIndex=birIndex, relayIndex=relayIndex, trapInform45=trapInform45, diMode=diMode, trapInform13=trapInform13, trapInform25=trapInform25, diEntry=diEntry, tc=tc, diCounterOverflowFlag=diCounterOverflowFlag, aoMode=aoMode, spIndex=spIndex, trapInform04=trapInform04, rtdValueScaledMin=rtdValueScaledMin, firName=firName, DisplayString=DisplayString, diTable=diTable, aiBurnoutValueScaled=aiBurnoutValueScaled, aiResetMinValue=aiResetMinValue, rtdResetMinValue=rtdResetMinValue, trapInform57=trapInform57, trapInform64=trapInform64, doTable=doTable, trapInform09=trapInform09, trapInform29=trapInform29, birValue=birValue, wirEntry=wirEntry, spTable=spTable, trapInform54=trapInform54, aoChannelAliasName=aoChannelAliasName, tcResetMaxValue=tcResetMaxValue, trapInform34=trapInform34, rtdChannelNum=rtdChannelNum, trapInform17=trapInform17, relaySlotNum=relaySlotNum, aoValueScaled=aoValueScaled, ir=ir, doSlotNum=doSlotNum, fpSlotNum=fpSlotNum, trapInform56=trapInform56, trapInform60=trapInform60, birTable=birTable, diStatus=diStatus, aiMode=aiMode, relayChannelAliasName=relayChannelAliasName, aiValueRawMax=aiValueRawMax, relay=relay, aiChannelNum=aiChannelNum, trapInform31=trapInform31, diChannelNum=diChannelNum, diCounterOverflowFlagClear=diCounterOverflowFlagClear, diIndex=diIndex, rtdValueScaled=rtdValueScaled, trapInform30=trapInform30, aoStatus=aoStatus, moxa=moxa, trapInform63=trapInform63, spChannelNum=spChannelNum, aoValueRaw=aoValueRaw, trapInform02=trapInform02, deviceLocalDateTime=deviceLocalDateTime, aiSlotNum=aiSlotNum, trapInform21=trapInform21, trapInform14=trapInform14, trapInform37=trapInform37, tcType=tcType, rtdValueScaledMax=rtdValueScaledMax, spStatus=spStatus, trapInform35=trapInform35, dirValue=dirValue, spChannelAliasName=spChannelAliasName, dirEntry=dirEntry, ioThinx4510=ioThinx4510, trapInform01=trapInform01, firmwareVersion=firmwareVersion, trapInform38=trapInform38, doPulseOnWidth=doPulseOnWidth, trapInform46=trapInform46, trapInform61=trapInform61, firTable=firTable, diSlotNum=diSlotNum, trapInform49=trapInform49, trapInform12=trapInform12, rtdChannelAliasName=rtdChannelAliasName, trapInform40=trapInform40, event=event, aiValueScaledMin=aiValueScaledMin, aiValueScaledMax=aiValueScaledMax, trapInform18=trapInform18, trapInform26=trapInform26, trapInform55=trapInform55, doStatus=doStatus, birEntry=birEntry, doPulseOffWidth=doPulseOffWidth, wirTable=wirTable, trapInform27=trapInform27, trapInform58=trapInform58, aiValueRawMin=aiValueRawMin, firIndex=firIndex, diChannelAliasName=diChannelAliasName)
